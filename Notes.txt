Personal Expenses
Polythecnic of Porto, School of Engineering
#EAPLI [^1]
=======================

Parts of the application were developed to show specific approaches or 
techniques; as such, the overall application is not consistent in terms of design.
for production ready code this would obvisously be a problem as we should strive for 
consistency. in this case, it is acceptable as the inconsistencies are meant to provide
samples of different valid approaches.


several discussions migth be raised:
1) which layers?
2) domain objects with persistence knowledge or not
3) passing domain objects to the UI or not 
4) performing calculations in memory or directly at the persistence layer
5) factoring out common behaviour, e.g., IncomeType & ExpenseType, Income & Expense
6) having the explicit concept of account or not
7) initial balance of the account
8) can controllers call other controllers?
9) Lazy load and filtering of the movements collection (CheckingAccount)
10) have a single collection of movements or two separate colections for expenses and another for incomes?
11) SavingsPlan + SavingsRecord OR Savings as a single aggregate composed of Goals and Goal composed of Savings?
12) should the UI/controller create domain objects directly, e.g., Payment, ExpenseType
13) how to reuse behavior betwen controllers, e.g., ListExpense, RegisterExpense?


--------------------------------------------------------------------------
Project structure
--------------------------------------------------------------------------

eapli.expensemanager.consoleapp
	- presentation using console (and one GUI for charts :-). 
	- Main class and properties
eapli.expensemanager.bootstrap 
	- bootstrap data. should be ignored on a "real" instalation
eapli.expensemanager.core 
	- use case controllers, model, and persistence

eapli.framework
	- framework classes (mainly interfaces)
eapli.util
	- generic utility classes for handling files, math, and console


--------------------------------------------------------------------------
##1) which layers
--------------------------------------------------------------------------

the application follows a traditional approach of separating the following layers:

	UI | use case controllers | domain/model | persistence

access to the busines logic is guarded by use case controllers
 
generaly speaking the persistence layer is organized around the concept of Repository
(a class acting as an in memory list) that "takes care" of the objects.
to accomodate both in-memory and database repositories the persistence layer is actually 
composed of interfaces and a PersistenceFactory which acts as an Abstract Factory  
of the actual repository implementation

see Persistence-AbstractFactory.pptx


--------------------------------------------------------------------------
##2) domain objects with persistence knowledge or not
--------------------------------------------------------------------------

two different approaches are possible:
- pure domain objects without any knowledge of the persistence
- domain objects that can save and load thenselves from persistence (thus, an Active Record)

in the first case, the controller is responsible for obtaining the domain objects 
from the repository, asking the domain objects to perform the business logic and then pass
them back to the repository. in this case, the domain objects can "easily" be tested as 
they do not depend on any other package
this gets trickier when we need/want to have lazy load of collections...

	see alternative A in picture "package diagrams"

in the second case, the controller asks the domain object class to load a certain instance,
asks that object to perform the business operation and then asks the object to save itself
back to the database

	see alternative B in picture "package diagrams"

see "domain with persistence.pptx"


--------------------------------------------------------------------------
##3) passing domain objects to the UI or not 
--------------------------------------------------------------------------


--------------------------------------------------------------------------
##4) performing calculations in memory or directly at the persistence layer
--------------------------------------------------------------------------
both approaches have advantages and disavantages:


in memory
	advantages
		allows the use of business logic in code		
	disavantages
		performance my be poor
	
at persistence layer		
	advantages
		use of aggregated SQL functions is straigth forward	
		performance	
	disavantages
		complicated business logic is hard to implement

the BaseController provides one example of each approach for calculating the
current month expenditure and current week expenditure.

see also http://www.martinfowler.com/articles/dblogic.html


--------------------------------------------------------------------------
##5) factoring out common behaviour, e.g., IncomeType & ExpenseType, Income & Expense
--------------------------------------------------------------------------


--------------------------------------------------------------------------
##6) having the explicit concept of account or not
--------------------------------------------------------------------------


--------------------------------------------------------------------------
##7) initial balance of the account
--------------------------------------------------------------------------
UC 11 - Register Initial Balance
Há várias hipóteses para fazer isto, optei por criar uma classe “InitialBalance” que tem o valor
 do saldo inicial e uma data de referência que podemos mais tarde usar para validar para, por exemplo, que não existam movimentos inferiores a esta data. Esta classe é private da CheckingAccount e tem uma relação OneToOne.
Esta alternativa tem a vantagem de ser simples de implementar e ao mesmo tempo poder facilmente crescer. Tem também a vantagem de com a data introduzida podermos fazer algum controlo dos movimentos introduzidos, bem como a possibilidade de num dado momento passar movimentos a histórico e guardar o saldo nessa data.
Outras hipóteses: por exemplo ter apenas uma atributo valorInicial ou  "simular" o saldo inicial através de um movimento.


--------------------------------------------------------------------------
##8) can controllers call other controllers?
--------------------------------------------------------------------------


--------------------------------------------------------------------------
##9) Lazy load and filtering of the movements collection (CheckingAccount)
--------------------------------------------------------------------------


--------------------------------------------------------------------------
##10) have a single collection of movements or two separate colections for expenses and another for incomes?
--------------------------------------------------------------------------


--------------------------------------------------------------------------
##11) SavingsPlan + SavingsRecord OR Savings as a single aggregate composed of Goals and Goal composed of Savings?
--------------------------------------------------------------------------


--------------------------------------------------------------------------
##12) should the UI/controller create domain objects directly, e.g., Payment, ExpenseType
--------------------------------------------------------------------------

should the rules for the Creator pattern be fully enforced, e.g., the responsibility to 
create a Payment should be of Expense, or can the controller/UI create a Payment and pass it
to the Expense?


--------------------------------------------------------------------------
##13) how to reuse behavior betwen controllers, e.g., ListExpenseType, RegisterExpense?
--------------------------------------------------------------------------

RegisterExpenseController needs to expose the list of expense types to the UI. however, the 
ListExpenseTypeController already has that behaviour. in order to avoid duplication, should the 
RegisterExpenseController create a ListExpenseTypeController?


--------------------------------------------------------------------------
##14) when showing movements gruped by type, who performs the sum operation? UI, Controller or CheckingAccount?
--------------------------------------------------------------------------
* the UI might not be smart enough to compute the total sum with enough precision, and would carry a burden for the computer running the interface
* the Controller might indeed perform such calculation has it has all the data is needs for a short period of time, but it is not the controller function to perform mathematical operations
* the CheckingAccount might indeed be the very best resource to calculate the sum for each expense type, but it would not make sense to delegate the CheckingAccount to the interface. **NMB TODO** verificar o que faz sentido mover até o interface


--------------------------------------------------------------------------
##15) when showing movements gruped by type, should types with no values also appear? 
--------------------------------------------------------------------------
this can be another strategy


--------------------------------------------------------------------------
##16) Should Controllers be specialized by other Use Cases?
--------------------------------------------------------------------------


--------------------------------------------------------------------------
##17) Should UI be specialized by other Use Cases?
--------------------------------------------------------------------------
RegisterExpenseController create a ListExpenseTypeController?


---------------------------------------------------------------------------
GetBalance
---------------------------------------------------------------------------
Regra de negócio obviamente no checkingAccount;
Não há redundância, é calculado sempre que necessário;
- Mono / Multiutilizador?
- Cálculo sempre ou cria redundancia? Perfomance versus Redundancia?
- atributo ( + desempenho; - consistencia)
- calculado (-desempenho; + consistencia)
- saldos à data (-requer uma classe específica; +desempenho; + consistência)


Reporting
---
The class AggregatedExpenses is responsible for reporting data related to Expenses that can be aggregated by ExpenseType. 

In order to fully generalize the system, an AggregatedMovements should be used. Nevertheless, this approach has a major setback that can not be enforced by UML and only by using code (asserts). To crete an AggregatedMovements class, the a list of Movements should be kept. While ExpenseType and IncomeType inherit from MovementType, and Expense and Income inherit from Movement, only Expense is related to ExpenseType and Income to IncomeType therefore meaning that Movement is not related to MovementType. If this happenned, code should be used in the application to prevent that an object of type IncomeType wouldn't be used in an object of type Expense.


--------------------------------------------------------------------------
##Footnotes
[^1]:using # for headings, because === and ___ are not well combined with mac/linux/windows line breaks
